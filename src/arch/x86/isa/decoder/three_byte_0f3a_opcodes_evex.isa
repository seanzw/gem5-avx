// Copyright (c) 2008 The Regents of The University of Michigan
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Authors: Gabe Black

////////////////////////////////////////////////////////////////////
//
// Decode the three byte opcodes with the 0f3a prefix.
//
'X86ISA::ThreeByte0F3AOpcode': decode LEGACY_OP {
    1: decode LEGACY_DECODEVAL {
        format Inst {
            // 0x66
            0x1: decode OPCODE_OP {
                0x03: decode EVEX_L_EXTEND {
                    0x2: decode REX_W {
                        0x1: VALIGNQ(VZqo, WZqo, Ib);
                        0x0: VALIGND(VZqo, WZqo, Ib);
                    }
                    0x1: decode REX_W {
                        0x1: VALIGNQ(VYdo, WYdo, Ib);
                        0x0: VALIGND(VYdo, WYdo, Ib);
                    }
                    0x0: decode REX_W {
                        0x1: VALIGNQ(Vo, Wo, Ib);
                        0x0: VALIGND(Vo, Wo, Ib);
                    }
                }
                0x04: decode EVEX_L_EXTEND {
                    0x2: VPERMILPS(VZqo, WZqo, Ib);
                    0x1: VPERMILPS(VYdo, WYdo, Ib);
                    0x0: VPERMILPS(Vo, Wo, Ib);
                }
                0x05: decode EVEX_L_EXTEND {
                    0x2: VPERMILPD(VZqo, WZqo, Ib);
                    0x1: VPERMILPD(VYdo, WYdo, Ib);
                    0x0: VPERMILPD(Vo, Wo, Ib);
                }
                0x16: decode EVEX_L_EXTEND {
                    0x0: decode REX_W {
                        0x1: decode IMMEDIATE {
                            0x0: VPEXTRQL(Eq, Vo, Ib);
                            0x1: VPEXTRQH(Eq, Vo, Ib);
                        }
                        0x0: VPEXTRD(Ed, Vo, Ib);
                    }
                }
                0x17: decode EVEX_L_EXTEND {
                    0x0: VEXTRACTPS(Ed, Vo, Ib);
                }
                0x18: decode EVEX_L_EXTEND {
                    0x1: VINSERT128(VYdo, Wo, Ib);
                }
                0x19: decode EVEX_L_EXTEND {
                    0x2: decode IMMEDIATE {
                        0x0: VEXTRACT128L(Wo, VYdo, Ib);
                        0x1: VEXTRACT128H(Wo, VYdo, Ib);
                        0x2: VEXTRACT128HL(Wo, VZqo, Ib);
                        0x3: VEXTRACT128HH(Wo, VZqo, Ib);
                    }
                    0x1: decode IMMEDIATE {
                        0x0: VEXTRACT128L(Wo, VYdo, Ib);
                        0x1: VEXTRACT128H(Wo, VYdo, Ib);
                    }
                }
                0x1A: decode EVEX_L_EXTEND {
                    0x2: VINSERT256(VZqo, WYdo, Ib);
                }
                0x1B: decode EVEX_L_EXTEND {
                    0x2: decode REX_W {
                        0x1: decode IMMEDIATE {
                            0x0: VEXTRACT256L(WYdo, VZqo, Ib);
                            0x1: VEXTRACT256H(WYdo, VZqo, Ib);
                        }
                    }
                }
                0x25: decode EVEX_L_EXTEND {
                    0x2: decode REX_W {
                        0x1: VPTERNLOGQ(VZqo, WZqo, Ib);
                        0x0: VPTERNLOGD(VZqo, WZqo, Ib);
                    }
                    0x1: decode REX_W {
                        0x1: VPTERNLOGQ(VYdo, WYdo, Ib);
                        0x0: VPTERNLOGD(VYdo, WYdo, Ib);
                    }
                    0x0: decode REX_W {
                        0x1: VPTERNLOGQ(Vo, Wo, Ib);
                        0x0: VPTERNLOGD(Vo, Wo, Ib);
                    }
                }
                0x38: decode EVEX_L_EXTEND {
                    0x1: VINSERT128(VYdo, Wo, Ib);
                }
                0x39: decode EVEX_L_EXTEND {
                    0x2: decode REX_W {
                        0x1: decode IMMEDIATE {
                            0x0: VEXTRACT128L(Wo, VYdo, Ib);
                            0x1: VEXTRACT128H(Wo, VYdo, Ib);
                            0x2: VEXTRACT128HL(Wo, VZqo, Ib);
                            0x3: VEXTRACT128HH(Wo, VZqo, Ib);
                        }
                        0x0: decode IMMEDIATE {
                            0x0: VEXTRACT128L(Wo, VYdo, Ib);
                            0x1: VEXTRACT128H(Wo, VYdo, Ib);
                            0x2: VEXTRACT128HL(Wo, VZqo, Ib);
                            0x3: VEXTRACT128HH(Wo, VZqo, Ib);
                        }
                    }
                }
                0x3A: decode EVEX_L_EXTEND {
                    0x2: VINSERT256(VZqo, WYdo, Ib);
                }
                0x3B: decode EVEX_L_EXTEND {
                    0x2: decode IMMEDIATE {
                        0x0: VEXTRACT256L(WYdo, VZqo, Ib);
                        0x1: VEXTRACT256H(WYdo, VZqo, Ib);
                    }
                }
            }
        }
    }
}
